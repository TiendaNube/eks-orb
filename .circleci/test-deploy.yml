version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.2.3
  orb-tools: circleci/orb-tools@12.3.1
  eks: {}

filter-staging: &filter-staging
  branches:
    ignore:
      - /master/
filter-production: &filter-production
  branches:
    only: /master/
filter-release: &filter-release
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

workflows:
  publish:
    jobs:
      # The orb must be re-packed for publishing, and saved to the workspace.
      - orb-tools/pack:
          org_id: "d131425b-ff6e-4b41-b10f-c4d8ca7adab1"
          filters: *filter-release
      - orb-tools/publish:
          context: orbs-token
          circleci_token: CIRCLE_TOKEN
          orb_name: tiendanube/eks-orb
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires: [orb-tools/pack]
          filters: *filter-release
  production-argo-test-and-deploy:
    jobs:
      - production-argo-deploy-approval:
          type: approval
          filters: *filter-production
      - eks/argo-deploy:
          name: production-argo-deploy
          context: microservices
          pre-steps:
            - aws-cli/setup:
                role_arn: arn:aws:iam::201009178507:role/CircleCIRoleForOIDC_Generic
                region: ${AWS_REGION}
            - run:
                name: Simulate fetching secrets from AWS Secrets Manager and update helm envs
                command: |
                  database_secret_string='{"DB_HOST_PRIMARY": "my-db.example.com", "password": "v877NHZ4$6N"}'
                  export secret_string="$database_secret_string"
                  echo "export secret_string='$database_secret_string'" >> "$BASH_ENV"
                  password=$(echo $secret_string | jq -r .password)
                  host=$(echo $secret_string | jq -r .DB_HOST_PRIMARY)
                  database_url="postgresql://$username:$password@$host"
                  echo "export DATABASE_URL='$database_url'" >> "$BASH_ENV"
          checkout: true
          cluster-name: production
          image-tag: 9c85b6b
          region: ${AWS_REGION}
          namespace: argocd-rollouts-it
          release-name: ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
          s3-chart-repo: tiendanube-charts
          chart: tiendanube-charts/microservices-v8
          values-file: .circleci/resources/values-test-rollout-production.yml
          args: |
            --set env.DB_HOST_PRIMARY=$(echo "$secret_string" | jq -r ".DB_HOST_PRIMARY") \
            --set env.SETTINGS_ENV=feature \
            --set env.SPRING_PROFILES_ACTIVE=feature \
            --set-string labels."tags\.datadoghq\.com/env"=feature \
            --set-string env.DATABASE_URL=${DATABASE_URL} \
            --set env.BRANCH=${CIRCLE_BRANCH} \
            --set nameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set fullnameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set env.DD_TAGS="git.commit.sha:${CIRCLE_SHA1} git.repository_url:github.com/TiendaNube/${CIRCLE_PROJECT_REPONAME}" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"=${AWS_ACM_CERTIFICATES} \
            --set ingress.hosts[0]=${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com \
            --set labels.app=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set labels.service=${CIRCLE_PROJECT_REPONAME} \
            --set serviceAccount.create=false \
            --set-string env.APP_ENDPOINT="https://${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com" \
            --set-string env.DD_ENV=feature \
            --set-string env.DD_LOGS_INJECTION=true \
            --set-string env.DD_RUNTIME_METRICS_ENABLED=true \
            --set-string env.DD_SERVICE=${CIRCLE_PROJECT_REPONAME} \
            --set-string env.DD_VERSION=${CIRCLE_SHA1:0:7} \
            --set-string labels."tags\.datadoghq\.com/service"=${CIRCLE_PROJECT_REPONAME} \
            --set-string labels."tags\.datadoghq\.com/version"=${CIRCLE_SHA1:0:7} \
            --set-string labels.branch=${CIRCLE_BRANCH} \
            --set-string labels.commit_id=${CIRCLE_SHA1:0:7} \
            --set-string labels.protected_branch="false" \
            --set-string labels.version=${CIRCLE_BRANCH} \
          requires: [production-argo-deploy-approval]
          filters: *filter-production
  staging-argo-test-and-deploy:
    jobs:
      - staging-argo-deploy-approval:
          type: approval
          filters: *filter-staging
      - eks/argo-deploy:
          name: staging-argo-deploy
          context: microservices
          pre-steps:
            - aws-cli/setup:
                role_arn: arn:aws:iam::201009178507:role/CircleCIRoleForOIDC_Generic
                region: ${AWS_REGION_STAGING}
            - run:
                name: Simulate fetching secrets from AWS Secrets Manager and update helm envs
                command: |
                  echo 'export secret_string="{\"DB_HOST_PRIMARY\":\"my-db.example.com\"}"' >> "$BASH_ENV"
          checkout: true
          cluster-name: staging
          image-tag: stg-60cbb90
          region: ${AWS_REGION_STAGING}
          namespace: argocd-rollouts-it
          release-name: ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
          s3-chart-repo: tiendanube-charts
          chart: tiendanube-charts/microservices-v8
          values-file: .circleci/resources/values-test-rollout-staging.yml
          mesh: true
          args: |
            --set env.DB_HOST_PRIMARY=$(echo "$secret_string" | jq -r ".DB_HOST_PRIMARY") \
            --set env.SETTINGS_ENV=feature \
            --set env.SPRING_PROFILES_ACTIVE=feature \
            --set-string labels."tags\.datadoghq\.com/env"=feature \
            --set env.BRANCH=${CIRCLE_BRANCH} \
            --set nameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set fullnameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set env.DD_TAGS="git.commit.sha:${CIRCLE_SHA1} git.repository_url:github.com/TiendaNube/${CIRCLE_PROJECT_REPONAME}" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"=${AWS_ACM_CERTIFICATES} \
            --set ingress.hosts[0]=${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com \
            --set labels.app=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set labels.service=${CIRCLE_PROJECT_REPONAME} \
            --set serviceAccount.create=false \
            --set-string env.APP_ENDPOINT="https://${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com" \
            --set-string env.DD_ENV=feature \
            --set-string env.DD_LOGS_INJECTION=true \
            --set-string env.DD_RUNTIME_METRICS_ENABLED=true \
            --set-string env.DD_SERVICE=${CIRCLE_PROJECT_REPONAME} \
            --set-string env.DD_VERSION=${CIRCLE_SHA1:0:7} \
            --set-string labels."tags\.datadoghq\.com/service"=${CIRCLE_PROJECT_REPONAME} \
            --set-string labels."tags\.datadoghq\.com/version"=${CIRCLE_SHA1:0:7} \
            --set-string labels.branch=${CIRCLE_BRANCH} \
            --set-string labels.commit_id=${CIRCLE_SHA1:0:7} \
            --set-string labels.protected_branch="false" \
            --set-string labels.version=${CIRCLE_BRANCH} \
            --set-string env.DUMMY_ENV_VAR="dummy-value-3" \
          requires: [staging-argo-deploy-approval]
          filters: *filter-staging
  staging-helmv3-test-and-deploy:
    jobs:
      - staging-helmv3-deploy-approval:
          type: approval
          filters: *filter-staging
      - eks/helm-deploy:
          name: staging-helmv3-deploy
          context: microservices
          pre-steps:
            - aws-cli/setup:
                role_arn: arn:aws:iam::201009178507:role/CircleCIRoleForOIDC_Generic
                region: ${AWS_REGION_STAGING}
            - run:
                name: Simulate fetching secrets from AWS Secrets Manager and update helm envs
                command: |
                  echo 'export secret_string="{\"DB_HOST_PRIMARY\":\"my-db.example.com\"}"' >> "$BASH_ENV"
          checkout: true
          cluster-name: staging
          image-tag: stg-60cbb90
          region: ${AWS_REGION_STAGING}
          namespace: argocd-rollouts-it
          release-name: ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
          s3-chart-repo: tiendanube-charts
          chart: tiendanube-charts/microservices-v6
          values-file: .circleci/resources/values-test-rollout-staging.yml
          mesh: true
          helm-version: helmv3
          helmv3: true
          args: |
            --set env.DB_HOST_PRIMARY=$(echo "$secret_string" | jq -r ".DB_HOST_PRIMARY") \
            --set env.SETTINGS_ENV=feature \
            --set env.SPRING_PROFILES_ACTIVE=feature \
            --set-string labels."tags\.datadoghq\.com/env"=feature \
            --set env.BRANCH=${CIRCLE_BRANCH} \
            --set nameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set fullnameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set env.DD_TAGS="git.commit.sha:${CIRCLE_SHA1} git.repository_url:github.com/TiendaNube/${CIRCLE_PROJECT_REPONAME}" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"=${AWS_ACM_CERTIFICATES} \
            --set ingress.hosts[0]=${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com \
            --set labels.app=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set labels.service=${CIRCLE_PROJECT_REPONAME} \
            --set serviceAccount.create=false \
            --set-string env.APP_ENDPOINT="https://${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com" \
            --set-string env.DD_ENV=feature \
            --set-string env.DD_LOGS_INJECTION=true \
            --set-string env.DD_RUNTIME_METRICS_ENABLED=true \
            --set-string env.DD_SERVICE=${CIRCLE_PROJECT_REPONAME} \
            --set-string env.DD_VERSION=${CIRCLE_SHA1:0:7} \
            --set-string labels."tags\.datadoghq\.com/service"=${CIRCLE_PROJECT_REPONAME} \
            --set-string labels."tags\.datadoghq\.com/version"=${CIRCLE_SHA1:0:7} \
            --set-string labels.branch=${CIRCLE_BRANCH} \
            --set-string labels.commit_id=${CIRCLE_SHA1:0:7} \
            --set-string labels.protected_branch="false" \
            --set-string labels.version=${CIRCLE_BRANCH} \
          requires: [staging-helmv3-deploy-approval]
          filters: *filter-staging
  staging-helmv2-test-and-deploy:
    jobs:
      - staging-helmv2-deploy-approval:
          type: approval
          filters: *filter-staging
      - eks/helm-deploy:
          name: staging-helmv2-deploy
          context: microservices
          pre-steps:
            - aws-cli/setup:
                role_arn: arn:aws:iam::201009178507:role/CircleCIRoleForOIDC_Generic
                region: ${AWS_REGION_STAGING}
            - run:
                name: Simulate fetching secrets from AWS Secrets Manager and update helm envs
                command: |
                  echo 'export secret_string="{\"DB_HOST_PRIMARY\":\"my-db.example.com\"}"' >> "$BASH_ENV"
          checkout: true
          cluster-name: staging
          image-tag: stg-60cbb90
          region: ${AWS_REGION_STAGING}
          namespace: argocd-rollouts-it
          release-name: ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
          s3-chart-repo: tiendanube-charts
          chart: tiendanube-charts/microservices-v6
          values-file: .circleci/resources/values-test-rollout-staging.yml
          mesh: true
          args: |
            --set env.DB_HOST_PRIMARY=$(echo "$secret_string" | jq -r ".DB_HOST_PRIMARY") \
            --set env.SETTINGS_ENV=feature \
            --set env.SPRING_PROFILES_ACTIVE=feature \
            --set-string labels."tags\.datadoghq\.com/env"=feature \
            --set env.BRANCH=${CIRCLE_BRANCH} \
            --set nameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set fullnameOverride=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set env.DD_TAGS="git.commit.sha:${CIRCLE_SHA1} git.repository_url:github.com/TiendaNube/${CIRCLE_PROJECT_REPONAME}" \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"=${AWS_ACM_CERTIFICATES} \
            --set ingress.hosts[0]=${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com \
            --set labels.app=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} \
            --set labels.service=${CIRCLE_PROJECT_REPONAME} \
            --set serviceAccount.create=false \
            --set-string env.APP_ENDPOINT="https://${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BRANCH}.nubestaging.com" \
            --set-string env.DD_ENV=feature \
            --set-string env.DD_LOGS_INJECTION=true \
            --set-string env.DD_RUNTIME_METRICS_ENABLED=true \
            --set-string env.DD_SERVICE=${CIRCLE_PROJECT_REPONAME} \
            --set-string env.DD_VERSION=${CIRCLE_SHA1:0:7} \
            --set-string labels."tags\.datadoghq\.com/service"=${CIRCLE_PROJECT_REPONAME} \
            --set-string labels."tags\.datadoghq\.com/version"=${CIRCLE_SHA1:0:7} \
            --set-string labels.branch=${CIRCLE_BRANCH} \
            --set-string labels.commit_id=${CIRCLE_SHA1:0:7} \
            --set-string labels.protected_branch="false" \
            --set-string labels.version=${CIRCLE_BRANCH} \
          requires: [staging-helmv2-deploy-approval]
          filters: *filter-staging
