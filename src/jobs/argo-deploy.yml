description: Deploy the given Helm chart as an Argo Application to EKS Cluster

executor: << parameters.executor >>

parameters:
  executor:
    description: Executor to use for this job
    type: executor
    default: argo
  cluster-name:
    description: EKS cluster name
    type: string
  region:
    description: AWS region where the eks cluster is located
    type: string
  s3-chart-repo:
    description: Additional helm chart repository
    type: string
    default: tiendanube-charts
  chart:
    description: Chart that will be installed
    type: string
  release-name:
    description: Helm release name
    type: string
  values-file:
    description: Helm values file for the service deployment
    type: string
  namespace:
    description: Namespace where the chart will be installed
    type: string
  image-tag:
    description: Which image tag will be installed
    type: string
  args:
    description: args to be used as helm client args
    type: string
    default: ""
  checkout:
    description: Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean
    default: true
  resource-name:
    description: The name of the resource to be used. For Argo Rollouts, this should be 'rollout'
    type: string
    default: 'rollout'
  set-path-annotation:
    description: |
      Path annotation
      Example: .spec.template.metadata.annotations.
    type: string
    default: '.spec.template.metadata.annotations.'
  helm-app-status-timeout:
    description: >
      The length of time to wait before ending the watch of Argo Application deployment (e.g. 1s, 2m, 3h)
      Must be a floating point number with an optional suffix: 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
      A duration of 0 disables the associated timeout.
    type: string
    default: '1m'
  rollout-status:
    description: |
      Get the status of the rollout.
      This can only be used for resource types that are valid for usage with `kubectl rollout` subcommands.
    type: boolean
    default: true
  rollout-status-watch:
    description: Whether to watch the status of the latest rollout until it's done.
    type: boolean
    default: true
  rollout-status-timeout:
    description: >
      The length of time to wait before ending the watch of Argo Rollout (e.g. 1s, 2m, 3h)
      Must be a floating point number with an optional suffix: 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
      A duration of 0 (the default) disables the associated timeout, in order to wait until the rollout reaches a final state.
    type: string
    default: '0'
  mesh:
    default: false
    description: >
      check if enabled label istio on namespace
    type: boolean
  # New parameters for ArgoCD Application configuration
  destination-server:
    description: Kubernetes cluster URL
    type: string
    default: https://kubernetes.default.svc
  project:
    description: ArgoCD project name
    type: string
    default: tiendanube

steps:
  - run:
      name: Setup Environment Variables
      description: Define environment variables to share between steps
      command: |
        echo "------------------------------------------------------"
        ARGO_PARAMETERS_DIR=/tmp/argo-parameters
        mkdir -p "$ARGO_PARAMETERS_DIR"
        # Clean any previous files
        rm -f "$ARGO_PARAMETERS_DIR"/* 2>/dev/null || true
        echo "export ARGO_PARAMETERS_DIR=$ARGO_PARAMETERS_DIR" >> $BASH_ENV
        echo "export ARGO_PARAMETERS_FILE=$ARGO_PARAMETERS_DIR/parameters.yaml" >> $BASH_ENV
        echo "üìã Argo parameters directory: $ARGO_PARAMETERS_DIR"
        echo "------------------------------------------------------"
        HELM_DETECTION_DIR=/tmp/helm-detection
        mkdir -p "$HELM_DETECTION_DIR"
        # Clean any previous files
        rm -f "$HELM_DETECTION_DIR"/* 2>/dev/null || true
        echo "export HELM_DETECTION_DIR=$HELM_DETECTION_DIR" >> $BASH_ENV
        echo "export HELM_DETECTION_CHART_NAME_FILE=$HELM_DETECTION_DIR/chart_name" >> $BASH_ENV
        echo "üìã Helm detection directory: $HELM_DETECTION_DIR"
        echo "------------------------------------------------------"
        echo "export HELM_RELEASE_NAME=<< parameters.release-name >>" >> $BASH_ENV
        echo "export HELM_NAMESPACE=<< parameters.namespace >>" >> $BASH_ENV
        echo "export EKS_NUBE_PROFILE=<< parameters.cluster-name >>" >> $BASH_ENV

  - when:
      condition: << parameters.checkout >>
      steps:
        - checkout

  - update-kubeconfig-with-authenticator:
      cluster-name: << parameters.cluster-name >>
      aws-region: << parameters.region >>

  - run:
      name: Update helmv3 to v3.18.2
      command: |
        cd /tmp
        curl -Lo helm-v3.18.2-linux-amd64.tar.gz https://get.helm.sh/helm-v3.18.2-linux-amd64.tar.gz
        tar -zxvf helm-v3.18.2-linux-amd64.tar.gz && chmod +x ./linux-amd64/helm && sudo mv ./linux-amd64/helm /usr/local/bin/helmv3 && rm -rf ./linux-amd64 helm-v3.18.2-linux-amd64.tar.gz
        helmv3 version

  - run:
      name: Install Argo Rollouts Kubectl plugin
      command: |
        cd /tmp
        curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
        chmod +x ./kubectl-argo-rollouts-linux-amd64
        sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
        kubectl argo rollouts version

  - when:
      condition: << parameters.s3-chart-repo >>
      steps:
        - run:
            name: Add additional helm repo to helm v3
            command: |
              helmv3 repo add << parameters.s3-chart-repo >> s3://<< parameters.s3-chart-repo >>/
              helmv3 repo update

  - run:
      name: Detect Helm version
      description: |
        Script to detect which Helm version was used to create infrastructure. Usage: Set the following environment variables:
          HELM_RELEASE_NAME - The release name to check
          HELM_NAMESPACE - The namespace to check
          HELM_DETECTION_DIR - Directory to store detection results
      command: <<include(scripts/detect_helm_version.sh)>>

  - run:
      name: Validate previous Helm chart name
      command: |
        # Validate that previous_chart_name can only be microservices-v6 or empty
        previous_chart_name=$(cat ${HELM_DETECTION_CHART_NAME_FILE})
        if [ -n "$previous_chart_name" ] && [ "$previous_chart_name" != "microservices-v6" ]; then
          echo "‚ùå Error: previous_chart_name must be 'microservices-v6' or empty"
          exit 1
        fi
        echo "------------------------------------------------------"
        echo "üìù Previous chart name: $previous_chart_name"
        echo "------------------------------------------------------"

  - argo-migration-next-phase:
      release-name: << parameters.release-name >>
      values-file: << parameters.values-file >>
      namespace: << parameters.namespace >>
      image-tag: << parameters.image-tag >>
      chart: << parameters.chart >>
      args: <<#parameters.args>><<parameters.args>><</parameters.args>>
      mesh: << parameters.mesh >>
      profile: ${EKS_NUBE_PROFILE}
      previous-chart-name: $(cat ${HELM_DETECTION_CHART_NAME_FILE})

  - run:
      name: Get ArgoCD Application parameters from Helm chart
      command: |
        PARAMETERS_CHART_DIR=${ARGO_PARAMETERS_DIR}/parameter-chart
        # Create directory structure for the chart
        mkdir -p ${PARAMETERS_CHART_DIR}/templates
        # Create Chart.yaml
        cat \<< EOF > ${PARAMETERS_CHART_DIR}/Chart.yaml
        apiVersion: v2
        name: parameter-chart
        description: Chart to visualize parameters
        type: application
        version: 0.1.0
        appVersion: "1.0.0"
        EOF
        # Create empty values.yaml
        echo "# Default values" > ${PARAMETERS_CHART_DIR}/values.yaml
        # Create template that will just output parameters
        cat \<< 'EOF' > ${PARAMETERS_CHART_DIR}/templates/parameters.yaml
        {{- define "formatValue" -}}
        {{- $value := . -}}
        {{- if or (kindIs "bool" $value) (kindIs "float64" $value) (kindIs "int" $value) }}
        value: {{ $value }}
        {{- else }}
        value: {{ $value | quote }}
        forceString: true
        {{- end }}
        {{- end -}}
        {{- define "flatten" -}}
        {{- $root := index . 0 -}}
        {{- $prefix := index . 1 -}}
        {{- range $k, $v := $root }}
        {{- $name := "" -}}
        {{- if eq $prefix "" -}}
        {{- $name = $k -}}
        {{- else -}}
        {{- $name = printf "%s.%s" $prefix ($k | replace "." "\\.")  -}}
        {{- end -}}
        {{- if kindIs "map" $v }}
        {{- include "flatten" (list $v $name) }}
        {{- else if kindIs "slice" $v }}
        {{- range $i, $item := $v }}
        - name: {{ $name }}[{{ $i }}]
        {{- include "formatValue" $item | nindent 2 }}
        {{- end }}
        {{- else }}
        - name: {{ $name }}
        {{- include "formatValue" $v | nindent 2 }}
        {{- end }}
        {{- end }}
        {{- end }}
        parameters:
        {{- include "flatten" (list .Values "") | nindent 2 -}}
        EOF
        ARGO_PARAMETERS_RAW_FILE="${ARGO_PARAMETERS_DIR}/raw-parameters.yaml"
        # Generate template output with all values
        helmv3 template \
          parameter-chart \
          --set-string image.tag="<< parameters.image-tag >>" \
          --set mesh=<< parameters.mesh >> \
          <<#parameters.args>><<parameters.args>><</parameters.args>> \
          --set-string previousChartName="$(cat ${HELM_DETECTION_CHART_NAME_FILE})" \
          --set-string canaryMigrationPhaseOverride="$(cat /tmp/migration-phase-label)" \
          --set-string profile="${EKS_NUBE_PROFILE}" \
          "$PARAMETERS_CHART_DIR" > "$ARGO_PARAMETERS_RAW_FILE"
        echo "------------------------------------------------------"
        echo "üìä Parameters:"
        echo "------------------------------------------------------"
        # Extract only the parameters section onwards, skipping warnings
        sed -n '/^parameters:/,$p' "$ARGO_PARAMETERS_RAW_FILE" > "${ARGO_PARAMETERS_FILE}"
        cat "${ARGO_PARAMETERS_FILE}"
        echo "------------------------------------------------------"

  - run:
      name: Create ArgoCD Application manifest
      command: |
        VALUES=$(cat << parameters.values-file >>)
        VALUES_INDENTED=$(echo "$VALUES" | awk 'NR==1{print $0; next} {print "      "$0}')
        PARAMETERS=$(cat "${ARGO_PARAMETERS_FILE}")
        PARAMETERS_INDENTED=$(echo "$PARAMETERS" | awk 'NR==1{print $0; next} {print "      "$0}')
        cat \<< EOF > /tmp/argocd-app-values.yaml
        argocd:
          namespace: argocd

        destination:
          namespace: << parameters.namespace >>
          server: << parameters.destination-server >>

        source:
          path: microservices-v8
          repoURL: https://github.com/TiendaNube/helm-charts
          targetRevision: bac-386-configure-legacy-service-to-ignore-pods-created-by-argo
          helm:
            releaseName: << parameters.release-name >>
            $PARAMETERS_INDENTED
            file: |-
              $VALUES_INDENTED

        project: << parameters.project >>

        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            applyOutOfSyncOnly: true
            createNamespace: true
            pruneLast: true
            validate: true
            replace: false
        EOF
        cat /tmp/argocd-app-values.yaml

  - annotation:
      app-name: << parameters.release-name >>-app
      namespace: << parameters.namespace >>
      resource-name: << parameters.resource-name >>
      set-name: "kubernetes.io/previous-tag"
      get-current-name: kubernetes\.io\/current-tag
      set-path-annotation: << parameters.set-path-annotation >>
      get-current-value: true
      ignore-not-found: true

  - annotation:
      app-name: << parameters.release-name >>-app
      namespace: << parameters.namespace >>
      resource-name: << parameters.resource-name >>
      set-name: "kubernetes.io/current-tag"
      set-value: "<< parameters.image-tag >>"
      ignore-not-found: true

  - run:
      name: Upsert Argo Application
      command: |
        helmv3 upgrade \
          --create-namespace \
          --install \
          << parameters.release-name >>-app \
          --values << parameters.values-file >> \
          --values /tmp/argocd-app-values.yaml \
          --namespace << parameters.namespace >> \
          <<#parameters.args>><<parameters.args>><</parameters.args>> \
          << parameters.s3-chart-repo >>/argocd-apps

  - helm-status:
      release-name: << parameters.release-name >>-app
      namespace: << parameters.namespace >>
      timeout: << parameters.helm-app-status-timeout >>

  - when:
      condition: << parameters.rollout-status >>
      steps:
        - argo-rollout-status:
            release-name: << parameters.release-name >>
            namespace: << parameters.namespace >>
            timeout: << parameters.rollout-status-timeout >>

  - argo-migration-checkpoint:
      release-name: << parameters.release-name >>
      namespace: argocd
      migration-phase: $(cat /tmp/migration-phase-label)
