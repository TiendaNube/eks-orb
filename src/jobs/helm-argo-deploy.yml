description: Deploy the given Helm chart as an Argo Application to EKS Cluster

executor: << parameters.executor >>

parameters:
  executor:
    description: Executor to use for this job
    type: executor
    default: argo
  cluster-name:
    description: EKS cluster name
    type: string
  region:
    description: AWS region where the eks cluster is located
    type: string
  s3-chart-repo:
    description: Additional helm chart repository
    type: string
    default: tiendanube-charts
  chart:
    description: Chart that will be installed
    type: string
  release-name:
    description: Helm release name
    type: string
  values-file:
    description: Helm values file for the service deployment
    type: string
  namespace:
    description: Namespace where the chart will be installed
    type: string
  image-tag:
    description: Which image tag will be installed
    type: string
  args:
    description: args to be used as helm client args
    type: string
    default: ""
  checkout:
    description: Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean
    default: true
  resource-name:
    description: The name of the resource to be used. For Argo Rollouts, this should be 'rollout'
    type: string
    default: 'rollout'
  set-path-annotation:
    description: |
      Path annotation
      Example: .spec.template.metadata.annotations.
    type: string
    default: '.spec.template.metadata.annotations.'
  helm-app-status-timeout:
    description: >
      The length of time to wait before ending the watch of Argo Application deployment (e.g. 1s, 2m, 3h)
      Must be a floating point number with an optional suffix: 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
      A duration of 0 disables the associated timeout.
    type: string
    default: '1m'
  rollout-status:
    description: |
      Get the status of the rollout.
      This can only be used for resource types that are valid for usage with `kubectl rollout` subcommands.
    type: boolean
    default: true
  rollout-status-watch:
    description: Whether to watch the status of the latest rollout until it's done.
    type: boolean
    default: true
  rollout-status-timeout:
    description: >
      The length of time to wait before ending the watch of Argo Rollout (e.g. 1s, 2m, 3h)
      Must be a floating point number with an optional suffix: 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
      A duration of 0 (the default) disables the associated timeout, in order to wait until the rollout reaches a final state.
    type: string
    default: '0'
  mesh:
    default: false
    description: >
      check if enabled label istio on namespace
    type: boolean
  # New parameters for ArgoCD Application configuration
  destination-server:
    description: Kubernetes cluster URL
    type: string
    default: https://kubernetes.default.svc
  project:
    description: ArgoCD project name
    type: string
    default: tiendanube

steps:
  - when:
      condition: << parameters.checkout >>
      steps:
        - checkout

  - update-kubeconfig-with-authenticator:
      cluster-name: << parameters.cluster-name >>
      aws-region: << parameters.region >>

  - run:
      name: Update helmv3 to v3.18.2
      command: |
        cd /tmp
        curl -Lo helm-v3.18.2-linux-amd64.tar.gz https://get.helm.sh/helm-v3.18.2-linux-amd64.tar.gz
        tar -zxvf helm-v3.18.2-linux-amd64.tar.gz && chmod +x ./linux-amd64/helm && sudo mv ./linux-amd64/helm /usr/local/bin/helmv3 && rm -rf ./linux-amd64 helm-v3.18.2-linux-amd64.tar.gz
        helmv3 version

  - run:
      name: Install Argo Rollouts Kubectl plugin
      command: |
        cd /tmp
        curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
        chmod +x ./kubectl-argo-rollouts-linux-amd64
        sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
        kubectl argo rollouts version

  - when:
      condition: << parameters.s3-chart-repo >>
      steps:
        - run:
            name: Add additional helm repo to helm v3
            command: |
              helmv3 repo add << parameters.s3-chart-repo >> s3://<< parameters.s3-chart-repo >>/
              helmv3 repo update

  - run:
      name: Extract previous chart name
      command: |
        set +e
        # Define the yq expression for extracting the deployed chart name
        # This expression filters the history to find the last deployed chart and removes the version suffix
        # The version suffix is assumed to be in the format -X.Y.Z where X, Y, and Z are integers
        # The sed command removes the version suffix from the chart name
        YQ_EXPR='map(select(.status == "deployed")) | .[0].chart // ""'
        # Run helm history and capture stderr and exit code
        HELM_HISTORY_OUTPUT=$(helmv3 history \
          rollouts-circleci-integration-test \
          --namespace argocd-rollouts-integration-test -o yaml 2>&1)
        HELM_EXIT_CODE=$?
        # Check for 'release: not found' error or any non-zero exit code
        if [ $HELM_EXIT_CODE -ne 0 ]; then
          echo "$HELM_HISTORY_OUTPUT"
          if echo "$HELM_HISTORY_OUTPUT" | grep -q 'release: not found'; then
            echo "" > /tmp/previous_chart_name
            exit 0
          else
            exit 1
          fi
        fi
        echo "$HELM_HISTORY_OUTPUT" | grep -v '^WARNING:' > /tmp/helm_history.yaml
        echo "------------------------------------------------------"
        echo "üìã Helm History:"
        echo "------------------------------------------------------"
        cat /tmp/helm_history.yaml
        echo "------------------------------------------------------"
        yq eval "$YQ_EXPR" /tmp/helm_history.yaml | sed -E 's/-[0-9]+\.[0-9]+\.[0-9]+$//' > /tmp/previous_chart_name
        # Validate that previous_chart_name can only be microservices-v6 or empty
        previous_chart_name=$(cat /tmp/previous_chart_name)
        if [ -n "$previous_chart_name" ] && [ "$previous_chart_name" != "microservices-v6" ]; then
          echo "‚ùå Error: previous_chart_name must be 'microservices-v6' or empty"
          exit 1
        fi
        echo "------------------------------------------------------"
        echo "üìù Previous chart name: $previous_chart_name"
        echo "------------------------------------------------------"

  - run:
      name: Extract migration-phase label from Rollout
      command: |
        # Define the migration phase label key
        export MIGRATION_PHASE_LABEL="canary.tiendanube.com/migration-phase"
        # Render Helm chart to a temporary file
        helmv3 template \
          << parameters.release-name >> \
          --values << parameters.values-file >> \
          --namespace << parameters.namespace >> \
          --set-string image.tag="<< parameters.image-tag >>" \
          --set-string previousChartName="$(cat /tmp/previous_chart_name)" \
          --set mesh=<< parameters.mesh >> \
          <<#parameters.args>><<parameters.args>><</parameters.args>> \
          --dry-run=server \
          << parameters.chart >> > /tmp/rendered.yaml
        echo "------------------------------------------------------"
        echo "üìÑ Rendered YAML file content:"
        echo "------------------------------------------------------"
        cat /tmp/rendered.yaml
        echo "------------------------------------------------------"
        # Define the yq expression for extracting the migration phase label
        YQ_EXPR='select(.kind == "Rollout") | .metadata.labels["'"$MIGRATION_PHASE_LABEL"'"]'
        # Extract the migration phase label (empty string if not found)
        MIGRATION_PHASE=$(yq "$YQ_EXPR" /tmp/rendered.yaml)
        # Default to "completed" if not found or is 'null'
        if [ -n "$MIGRATION_PHASE" ] && [ "$MIGRATION_PHASE" != "null" ]; then
          case "$MIGRATION_PHASE" in
            initial|traffic|completed)
              echo "$MIGRATION_PHASE" > /tmp/migration-phase-label
              ;;
            *)
              echo "‚ùå Error: MIGRATION_PHASE must be one of: initial, traffic, completed"
              echo "üîç Current MIGRATION_PHASE value: $MIGRATION_PHASE"
              exit 1
              ;;
          esac
        else
          echo "completed" > /tmp/migration-phase-label
        fi
        echo "------------------------------------------------------"
        echo "üè∑Ô∏è  Migration phase label value: $(cat /tmp/migration-phase-label)"
        echo "------------------------------------------------------"

  - run:
      name: Export parameters as environment variable
      command: |
        echo "export HELM_PARAMETERS='<<parameters.args>>'" >> $BASH_ENV

  - run:
      name: DEBUG ARGS
      command: |
        echo "${HELM_PARAMETERS}"

  - run:
      name: Read Helm Parameters
      shell: /usr/bin/env python3
      command: <<include(scripts/parse_helm_parameters.py)>>

  - run:
      name: Generate ArgoCD Application values
      command: |
        echo "------------------------------------------------------"
        echo "‚öôÔ∏è  Rendered Helm Args:"
        echo "------------------------------------------------------"
        cat /tmp/helm-args.yaml
        echo "------------------------------------------------------"
        VALUES=$(cat << parameters.values-file >>)
        VALUES_INDENTED=$(echo "$VALUES" | awk 'NR==1{print $0; next} {print "      "$0}')
        HELM_ARGS=$(cat /tmp/helm-args.yaml)
        HELM_ARGS_INDENTED=$(echo "$HELM_ARGS" | awk 'NR==1{print $0; next} {print "      "$0}')
        cat \<< EOF > /tmp/argocd-app-values.yaml
        argocd:
          namespace: argocd

        destination:
          namespace: << parameters.namespace >>
          server: << parameters.destination-server >>

        source:
          path: microservices-v8
          repoURL: https://github.com/TiendaNube/helm-charts
          targetRevision: HEAD
          helm:
            releaseName: << parameters.release-name >>
            parameters:
              - name: image.tag
                value: "<< parameters.image-tag >>"
              - name: canaryMigrationPhaseOverride
                value: "$(cat /tmp/migration-phase-label)"
              - name: previousChartName
                value: "$(cat /tmp/previous_chart_name)"
              $HELM_ARGS_INDENTED
            file: |-
              $VALUES_INDENTED

        project: << parameters.project >>

        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            applyOutOfSyncOnly: true
            createNamespace: true
            pruneLast: true
            validate: true
            replace: false
        EOF
        cat /tmp/argocd-app-values.yaml

  - annotation:
      app-name: << parameters.release-name >>-app
      namespace: << parameters.namespace >>
      resource-name: << parameters.resource-name >>
      set-name: "kubernetes.io/previous-tag"
      get-current-name: kubernetes\.io\/current-tag
      set-path-annotation: << parameters.set-path-annotation >>
      get-current-value: true
      ignore-not-found: true

  - annotation:
      app-name: << parameters.release-name >>-app
      namespace: << parameters.namespace >>
      resource-name: << parameters.resource-name >>
      set-name: "kubernetes.io/current-tag"
      set-value: "<< parameters.image-tag >>"
      ignore-not-found: true

  - run:
      name: Install Argo Application
      command: |
        helmv3 upgrade \
          --create-namespace \
          --install \
          << parameters.release-name >>-app \
          --values << parameters.values-file >> \
          --values /tmp/argocd-app-values.yaml \
          --namespace << parameters.namespace >> \
          <<#parameters.args>><<parameters.args>><</parameters.args>> \
          << parameters.s3-chart-repo >>/argocd-apps

  - helm-status:
      release-name: << parameters.release-name >>-app
      namespace: << parameters.namespace >>
      timeout: << parameters.helm-app-status-timeout >>

  - when:
      condition: << parameters.rollout-status >>
      steps:
        - argo-rollout-status:
            release-name: << parameters.release-name >>
            namespace: << parameters.namespace >>
            timeout: << parameters.rollout-status-timeout >>
